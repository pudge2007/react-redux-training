{"ast":null,"code":"import _defineProperty from \"D:\\\\projects\\\\mern-kinopoisk\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\projects\\\\mern-kinopoisk\\\\frontend\\\\src\\\\modules\\\\common\\\\Notifications\\\\containers\\\\NotificationContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withSnackbar } from \"notistack\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport * as actionCreators from \"../actions\";\nimport { getNotifications } from \"../selectors\";\n\nclass NotificationContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.displayed = [];\n\n    this.storeDisplayed = key => {\n      this.displayed = [...this.displayed, key];\n    };\n  }\n\n  componentDidUpdate() {\n    const _this$props = this.props,\n          notifications = _this$props.notifications,\n          enqueueSnackbar = _this$props.enqueueSnackbar;\n    const removeNotification = this.props.actions.removeNotification;\n    console.log(notifications);\n    notifications.forEach(({\n      key,\n      message,\n      options = {}\n    }) => {\n      // Do nothing if snackbar is already displayed\n      if (this.displayed.includes(key)) return; // Display snackbar using notistack\n\n      enqueueSnackbar(message, _objectSpread({}, options, {\n        onClose: () => removeNotification(key),\n        action: () => React.createElement(IconButton, {\n          onClick: () => removeNotification(key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }, React.createElement(CloseIcon, {\n          style: {\n            fontSize: 20,\n            color: \"#fff\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }))\n      })); // Keep track of snackbars that we've displayed\n\n      this.storeDisplayed(key);\n    });\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notifications: getNotifications(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch)\n  };\n};\n\nexport default withSnackbar(connect(mapStateToProps, mapDispatchToProps)(NotificationContainer));","map":{"version":3,"sources":["D:\\projects\\mern-kinopoisk\\frontend\\src\\modules\\common\\Notifications\\containers\\NotificationContainer.js"],"names":["React","Component","connect","bindActionCreators","withSnackbar","IconButton","CloseIcon","actionCreators","getNotifications","NotificationContainer","displayed","storeDisplayed","key","componentDidUpdate","props","notifications","enqueueSnackbar","removeNotification","actions","console","log","forEach","message","options","includes","onClose","action","fontSize","color","render","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AAEA,OAAO,KAAKC,cAAZ,MAAgC,YAAhC;AACA,SAASC,gBAAT,QAAiC,cAAjC;;AAEA,MAAMC,qBAAN,SAAoCR,SAApC,CAA8C;AAAA;AAAA;AAAA,SAC5CS,SAD4C,GAChC,EADgC;;AAAA,SAG5CC,cAH4C,GAG3BC,GAAG,IAAI;AACtB,WAAKF,SAAL,GAAiB,CAAC,GAAG,KAAKA,SAAT,EAAoBE,GAApB,CAAjB;AACD,KAL2C;AAAA;;AAO5CC,EAAAA,kBAAkB,GAAG;AAAA,wBACwB,KAAKC,KAD7B;AAAA,UACXC,aADW,eACXA,aADW;AAAA,UACIC,eADJ,eACIA,eADJ;AAAA,UAEXC,kBAFW,GAEY,KAAKH,KAAL,CAAWI,OAFvB,CAEXD,kBAFW;AAInBE,IAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ;AAEAA,IAAAA,aAAa,CAACM,OAAd,CAAsB,CAAC;AAAET,MAAAA,GAAF;AAAOU,MAAAA,OAAP;AAAgBC,MAAAA,OAAO,GAAG;AAA1B,KAAD,KAAoC;AACxD;AACA,UAAI,KAAKb,SAAL,CAAec,QAAf,CAAwBZ,GAAxB,CAAJ,EAAkC,OAFsB,CAGxD;;AACAI,MAAAA,eAAe,CAACM,OAAD,oBACVC,OADU;AAEbE,QAAAA,OAAO,EAAE,MAAMR,kBAAkB,CAACL,GAAD,CAFpB;AAGbc,QAAAA,MAAM,EAAE,MACN,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAE,MAAMT,kBAAkB,CAACL,GAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,SAAD;AAAW,UAAA,KAAK,EAAE;AAAEe,YAAAA,QAAQ,EAAE,EAAZ;AAAgBC,YAAAA,KAAK,EAAE;AAAvB,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAJW,SAAf,CAJwD,CAaxD;;AACA,WAAKjB,cAAL,CAAoBC,GAApB;AACD,KAfD;AAgBD;;AAEDiB,EAAAA,MAAM,GAAG;AACP,WAAO,IAAP;AACD;;AAjC2C;;AAoC9C,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLhB,IAAAA,aAAa,EAAEP,gBAAgB,CAACuB,KAAD;AAD1B,GAAP;AAGD,CAJD;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLf,IAAAA,OAAO,EAAEf,kBAAkB,CAACI,cAAD,EAAiB0B,QAAjB;AADtB,GAAP;AAGD,CAJD;;AAMA,eAAe7B,YAAY,CACzBF,OAAO,CACL4B,eADK,EAELE,kBAFK,CAAP,CAGEvB,qBAHF,CADyB,CAA3B","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { withSnackbar } from \"notistack\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport * as actionCreators from \"../actions\";\r\nimport { getNotifications } from \"../selectors\";\r\n\r\nclass NotificationContainer extends Component {\r\n  displayed = [];\r\n\r\n  storeDisplayed = key => {\r\n    this.displayed = [...this.displayed, key];\r\n  };\r\n\r\n  componentDidUpdate() {\r\n    const { notifications, enqueueSnackbar } = this.props;\r\n    const { removeNotification } = this.props.actions;\r\n\r\n    console.log(notifications);\r\n\r\n    notifications.forEach(({ key, message, options = {} }) => {\r\n      // Do nothing if snackbar is already displayed\r\n      if (this.displayed.includes(key)) return;\r\n      // Display snackbar using notistack\r\n      enqueueSnackbar(message, {\r\n        ...options,\r\n        onClose: () => removeNotification(key),\r\n        action: () => (\r\n          <IconButton onClick={() => removeNotification(key)}>\r\n            <CloseIcon style={{ fontSize: 20, color: \"#fff\" }} />\r\n          </IconButton>\r\n        )\r\n      });\r\n      // Keep track of snackbars that we've displayed\r\n      this.storeDisplayed(key);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    notifications: getNotifications(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    actions: bindActionCreators(actionCreators, dispatch)\r\n  };\r\n};\r\n\r\nexport default withSnackbar(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(NotificationContainer)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}