{"ast":null,"code":"import _defineProperty from \"D:\\\\projects\\\\mern-kinopoisk\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withSnackbar } from \"notistack\";\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport * as actionCreators from \"../actions\";\nimport Notification from \"../components\";\nimport { getNotifications } from \"../selectors\";\n\nclass NotificationContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      displayed: []\n    };\n\n    this.storeDisplayed = key => {\n      this.setState(({\n        displayed\n      }) => ({\n        displayed: [...displayed, key]\n      }));\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          notifications = _this$props.notifications,\n          enqueueSnackbar = _this$props.enqueueSnackbar;\n    const removeNotification = this.props.actions.removeNotification;\n    const displayed = this.state.displayed;\n    notifications.forEach(({\n      key,\n      message,\n      options = {}\n    }) => {\n      setTimeout(() => {\n        // Do nothing if snackbar is already displayed\n        if (this.displayed.includes(key)) return; // Display notification using notistack\n\n        enqueueSnackbar(message, _objectSpread({}, options, {\n          onClose: (event, reason, key) => {\n            if (options.onClose) {\n              options.onClose(event, reason, key);\n            } // Dispatch action to remove snackbar from redux store\n\n\n            this.props.removeSnackbar(key);\n          }\n          /*           action: () => (\r\n                      <IconButton onClick={() => removeNotification(notification.key)}>\r\n                        <CloseIcon style={{fontSize: 20, color: '#fff'}} />\r\n                      </IconButton>\r\n                    ) */\n\n        })); // Keep track of snackbars that we've displayed\n\n        this.storeDisplayed(key);\n      }, 1);\n    });\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notifications: getNotifications(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch)\n  };\n};\n\nexport default withSnackbar(connect(mapStateToProps, mapDispatchToProps)(NotificationContainer));","map":{"version":3,"sources":["D:\\projects\\mern-kinopoisk\\frontend\\src\\modules\\common\\Notifications\\containers\\NotificationContainer.js"],"names":["React","Component","connect","bindActionCreators","withSnackbar","IconButton","CloseIcon","actionCreators","Notification","getNotifications","NotificationContainer","state","displayed","storeDisplayed","key","setState","render","props","notifications","enqueueSnackbar","removeNotification","actions","forEach","message","options","setTimeout","includes","onClose","event","reason","removeSnackbar","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AAEA,OAAO,KAAKC,cAAZ,MAAgC,YAAhC;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,gBAAT,QAAiC,cAAjC;;AAEA,MAAMC,qBAAN,SAAoCT,SAApC,CAA8C;AAAA;AAAA;AAAA,SAW5CU,KAX4C,GAWpC;AACNC,MAAAA,SAAS,EAAE;AADL,KAXoC;;AAAA,SAe5CC,cAf4C,GAe3BC,GAAG,IAAI;AACtB,WAAKC,QAAL,CAAc,CAAC;AAAEH,QAAAA;AAAF,OAAD,MAAoB;AAChCA,QAAAA,SAAS,EAAE,CAAC,GAAGA,SAAJ,EAAeE,GAAf;AADqB,OAApB,CAAd;AAGD,KAnB2C;AAAA;;AAqB5CE,EAAAA,MAAM,GAAG;AAAA,wBACoC,KAAKC,KADzC;AAAA,UACCC,aADD,eACCA,aADD;AAAA,UACgBC,eADhB,eACgBA,eADhB;AAAA,UAECC,kBAFD,GAEwB,KAAKH,KAAL,CAAWI,OAFnC,CAECD,kBAFD;AAAA,UAGCR,SAHD,GAGe,KAAKD,KAHpB,CAGCC,SAHD;AAKPM,IAAAA,aAAa,CAACI,OAAd,CAAsB,CAAC;AAAER,MAAAA,GAAF;AAAOS,MAAAA,OAAP;AAAgBC,MAAAA,OAAO,GAAG;AAA1B,KAAD,KAAoC;AACxDC,MAAAA,UAAU,CAAC,MAAM;AACf;AACA,YAAI,KAAKb,SAAL,CAAec,QAAf,CAAwBZ,GAAxB,CAAJ,EAAkC,OAFnB,CAGf;;AACAK,QAAAA,eAAe,CAACI,OAAD,oBACVC,OADU;AAEbG,UAAAA,OAAO,EAAE,CAACC,KAAD,EAAQC,MAAR,EAAgBf,GAAhB,KAAwB;AAC/B,gBAAIU,OAAO,CAACG,OAAZ,EAAqB;AACjBH,cAAAA,OAAO,CAACG,OAAR,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+Bf,GAA/B;AACH,aAH8B,CAI/B;;;AACA,iBAAKG,KAAL,CAAWa,cAAX,CAA0BhB,GAA1B;AACH;AACT;;;;;;AATuB,WAAf,CAJe,CAmBf;;AACA,aAAKD,cAAL,CAAoBC,GAApB;AACD,OArBS,EAqBP,CArBO,CAAV;AAsBD,KAvBD;AAyBA,WAAO,IAAP;AACD;;AApD2C;;AAuD9C,MAAMiB,eAAe,GAAGpB,KAAK,IAAI;AAC/B,SAAO;AACLO,IAAAA,aAAa,EAAET,gBAAgB,CAACE,KAAD;AAD1B,GAAP;AAGD,CAJD;;AAMA,MAAMqB,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLZ,IAAAA,OAAO,EAAElB,kBAAkB,CAACI,cAAD,EAAiB0B,QAAjB;AADtB,GAAP;AAGD,CAJD;;AAMA,eAAe7B,YAAY,CACzBF,OAAO,CACL6B,eADK,EAELC,kBAFK,CAAP,CAGEtB,qBAHF,CADyB,CAA3B","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { withSnackbar } from \"notistack\";\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport * as actionCreators from \"../actions\";\r\nimport Notification from \"../components\";\r\nimport { getNotifications } from \"../selectors\";\r\n\r\nclass NotificationContainer extends Component {\r\n  /*   remove = id => {\r\n    this.props.actions.removeNotification(id);\r\n  };\r\n\r\n  render() {\r\n    return this.props.notifications.map(n => (\r\n      <Notification key={n.id} {...n} onClose={this.remove} />\r\n    ));\r\n  } */\r\n\r\n  state = {\r\n    displayed: []\r\n  };\r\n\r\n  storeDisplayed = key => {\r\n    this.setState(({ displayed }) => ({\r\n      displayed: [...displayed, key]\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { notifications, enqueueSnackbar } = this.props;\r\n    const { removeNotification } = this.props.actions;\r\n    const { displayed } = this.state;\r\n\r\n    notifications.forEach(({ key, message, options = {} }) => {\r\n      setTimeout(() => {\r\n        // Do nothing if snackbar is already displayed\r\n        if (this.displayed.includes(key)) return;\r\n        // Display notification using notistack\r\n        enqueueSnackbar(message, {\r\n          ...options,\r\n          onClose: (event, reason, key) => {\r\n            if (options.onClose) {\r\n                options.onClose(event, reason, key);\r\n            }\r\n            // Dispatch action to remove snackbar from redux store\r\n            this.props.removeSnackbar(key);\r\n        }\r\n/*           action: () => (\r\n            <IconButton onClick={() => removeNotification(notification.key)}>\r\n              <CloseIcon style={{fontSize: 20, color: '#fff'}} />\r\n            </IconButton>\r\n          ) */\r\n        });\r\n        // Keep track of snackbars that we've displayed\r\n        this.storeDisplayed(key);\r\n      }, 1);\r\n    });\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    notifications: getNotifications(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    actions: bindActionCreators(actionCreators, dispatch)\r\n  };\r\n};\r\n\r\nexport default withSnackbar(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(NotificationContainer)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}