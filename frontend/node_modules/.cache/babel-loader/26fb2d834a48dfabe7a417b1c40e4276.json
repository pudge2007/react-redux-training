{"ast":null,"code":"import _defineProperty from \"D:\\\\projects\\\\mern-kinopoisk\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\projects\\\\mern-kinopoisk\\\\frontend\\\\src\\\\modules\\\\common\\\\Notifications\\\\containers\\\\NotificationContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withSnackbar } from \"notistack\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport * as actionCreators from \"../actions\";\nimport { getNotifications } from \"../selectors\";\n\nclass NotificationContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.displayed = [];\n\n    this.storeDisplayed = key => {\n      this.displayed = [...this.displayed, key];\n    };\n  }\n\n  shouldComponentUpdate({\n    notifications: newSnacks = []\n  }) {\n    console.log('newSnacks', newSnacks);\n\n    if (!newSnacks.length) {\n      this.displayed = [];\n      return false;\n    }\n\n    const _this$props = this.props,\n          currentSnacks = _this$props.notifications,\n          closeSnackbar = _this$props.closeSnackbar;\n    const _this$props$actions = this.props.actions,\n          closeNotification = _this$props$actions.closeNotification,\n          removeNotification = _this$props$actions.removeNotification;\n    console.log(currentSnacks);\n    let notExists = false;\n\n    for (let i = 0; i < newSnacks.length; i += 1) {\n      const newSnack = newSnacks[i];\n      console.log(newSnack);\n\n      if (newSnack.dismissed) {\n        console.log('dissmissed');\n        closeSnackbar(newSnack.key);\n        removeNotification(newSnack.key);\n      }\n\n      if (notExists) continue;\n      notExists = notExists || !currentSnacks.filter(({\n        key\n      }) => newSnack.key === key).length;\n    }\n\n    return notExists;\n  }\n\n  componentDidUpdate() {\n    const _this$props2 = this.props,\n          notifications = _this$props2.notifications,\n          enqueueSnackbar = _this$props2.enqueueSnackbar;\n    const closeNotification = this.props.actions.closeNotification;\n    notifications.forEach(({\n      key,\n      message,\n      options = {}\n    }) => {\n      // Do nothing if snackbar is already displayed\n      if (this.displayed.includes(key)) return; // Display snackbar using notistack\n\n      enqueueSnackbar(message, _objectSpread({}, options, {\n        onClose: () => closeNotification(key),\n        action: () => React.createElement(IconButton, {\n          onClick: () => closeNotification(key),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(CloseIcon, {\n          style: {\n            fontSize: 20,\n            color: \"#fff\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        }))\n      })); // Keep track of snackbars that we've displayed\n\n      this.storeDisplayed(key);\n    });\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notifications: getNotifications(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch)\n  };\n};\n\nexport default withSnackbar(connect(mapStateToProps, mapDispatchToProps)(NotificationContainer));","map":{"version":3,"sources":["D:\\projects\\mern-kinopoisk\\frontend\\src\\modules\\common\\Notifications\\containers\\NotificationContainer.js"],"names":["React","Component","connect","bindActionCreators","withSnackbar","IconButton","CloseIcon","actionCreators","getNotifications","NotificationContainer","displayed","storeDisplayed","key","shouldComponentUpdate","notifications","newSnacks","console","log","length","props","currentSnacks","closeSnackbar","actions","closeNotification","removeNotification","notExists","i","newSnack","dismissed","filter","componentDidUpdate","enqueueSnackbar","forEach","message","options","includes","onClose","action","fontSize","color","render","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { withSnackbar } from \"notistack\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport * as actionCreators from \"../actions\";\r\nimport { getNotifications } from \"../selectors\";\r\n\r\nclass NotificationContainer extends Component {\r\n  displayed = [];\r\n\r\n  storeDisplayed = key => {\r\n    this.displayed = [...this.displayed, key];\r\n  };\r\n\r\n  shouldComponentUpdate({ notifications: newSnacks = [] }) {\r\n      console.log('newSnacks', newSnacks)\r\n    if (!newSnacks.length) {\r\n      this.displayed = [];\r\n      return false;\r\n    }\r\n\r\n    const { notifications: currentSnacks, closeSnackbar } = this.props;\r\n    const { closeNotification, removeNotification } = this.props.actions;\r\n\r\n    console.log(currentSnacks);\r\n\r\n    let notExists = false;\r\n    for (let i = 0; i < newSnacks.length; i += 1) {\r\n      const newSnack = newSnacks[i];\r\n\r\n      console.log(newSnack);\r\n\r\n      if (newSnack.dismissed) {\r\n          console.log('dissmissed')\r\n          closeSnackbar(newSnack.key);\r\n        removeNotification(newSnack.key);\r\n      }\r\n\r\n      if (notExists) continue;\r\n      notExists = notExists || !currentSnacks.filter(({ key }) => newSnack.key === key).length;\r\n    }\r\n    return notExists;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { notifications, enqueueSnackbar } = this.props;\r\n    const { closeNotification } = this.props.actions;\r\n\r\n    notifications.forEach(({ key, message, options = {} }) => {\r\n      // Do nothing if snackbar is already displayed\r\n      if (this.displayed.includes(key)) return;\r\n      // Display snackbar using notistack\r\n      enqueueSnackbar(message, {\r\n        ...options,\r\n        onClose: () => closeNotification(key),\r\n        action: () => (\r\n          <IconButton onClick={() => closeNotification(key)}>\r\n            <CloseIcon style={{ fontSize: 20, color: \"#fff\" }} />\r\n          </IconButton>\r\n        )\r\n      });\r\n      // Keep track of snackbars that we've displayed\r\n      this.storeDisplayed(key);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    notifications: getNotifications(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    actions: bindActionCreators(actionCreators, dispatch)\r\n  };\r\n};\r\n\r\nexport default withSnackbar(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(NotificationContainer)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}