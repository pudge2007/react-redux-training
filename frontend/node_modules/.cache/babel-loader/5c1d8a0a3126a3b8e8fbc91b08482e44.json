{"ast":null,"code":"import _defineProperty from \"D:\\\\projects\\\\mern-kinopoisk\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withSnackbar } from \"notistack\";\nimport * as actionCreators from \"../actions\";\nimport Notification from \"../components\";\nimport { getNotifications } from \"../selectors\";\n\nclass NotificationContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.displayed = [];\n\n    this.storeDisplayed = id => {\n      this.displayed = [...this.displayed, id];\n    };\n  }\n\n  shouldComponentUpdate({\n    notifications: newSnacks = []\n  }) {\n    if (!newSnacks.length) {\n      this.displayed = [];\n      return false;\n    }\n\n    const currentSnacks = this.props.notifications;\n    let notExists = false;\n\n    for (let i = 0; i < newSnacks.length; i += 1) {\n      const newSnack = newSnacks[i];\n\n      if (newSnack.dismissed) {\n        this.props.closeSnackbar(newSnack.key);\n        this.props.removeSnackbar(newSnack.key);\n      }\n\n      if (notExists) continue;\n      notExists = notExists || !currentSnacks.filter(({\n        key\n      }) => newSnack.key === key).length;\n    }\n\n    return notExists;\n  }\n\n  componentDidUpdate() {\n    const _this$props$notificat = this.props.notifications,\n          notifications = _this$props$notificat === void 0 ? [] : _this$props$notificat;\n    notifications.forEach(({\n      key,\n      message,\n      options = {}\n    }) => {\n      // Do nothing if snackbar is already displayed\n      if (this.displayed.includes(key)) return; // Display snackbar using notistack\n\n      this.props.enqueueSnackbar(message, _objectSpread({}, options, {\n        onClose: (event, reason, key) => {\n          if (options.onClose) {\n            options.onClose(event, reason, key);\n          } // Dispatch action to remove snackbar from redux store\n\n\n          this.props.removeSnackbar(key);\n        }\n      })); // Keep track of snackbars that we've displayed\n\n      this.storeDisplayed(key);\n    });\n  }\n\n  render() {\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notifications: getNotifications(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch)\n  };\n};\n\nexport default withSnackbar(connect(mapStateToProps, mapDispatchToProps)(NotificationContainer));","map":{"version":3,"sources":["D:\\projects\\mern-kinopoisk\\frontend\\src\\modules\\common\\Notifications\\containers\\NotificationContainer.js"],"names":["React","Component","connect","bindActionCreators","withSnackbar","actionCreators","Notification","getNotifications","NotificationContainer","displayed","storeDisplayed","id","shouldComponentUpdate","notifications","newSnacks","length","currentSnacks","props","notExists","i","newSnack","dismissed","closeSnackbar","key","removeSnackbar","filter","componentDidUpdate","forEach","message","options","includes","enqueueSnackbar","onClose","event","reason","render","mapStateToProps","state","mapDispatchToProps","dispatch","actions"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { withSnackbar } from \"notistack\";\r\n\r\nimport * as actionCreators from \"../actions\";\r\nimport Notification from \"../components\";\r\nimport { getNotifications } from \"../selectors\";\r\n\r\nclass NotificationContainer extends Component {\r\n  /*   remove = id => {\r\n    this.props.actions.removeNotification(id);\r\n  };\r\n\r\n  render() {\r\n    return this.props.notifications.map(n => (\r\n      <Notification key={n.id} {...n} onClose={this.remove} />\r\n    ));\r\n  } */\r\n\r\n  displayed = [];\r\n\r\n  storeDisplayed = id => {\r\n    this.displayed = [...this.displayed, id];\r\n  };\r\n\r\n  shouldComponentUpdate({ notifications: newSnacks = [] }) {\r\n    if (!newSnacks.length) {\r\n      this.displayed = [];\r\n      return false;\r\n    }\r\n\r\n    const { notifications: currentSnacks } = this.props;\r\n    let notExists = false;\r\n    for (let i = 0; i < newSnacks.length; i += 1) {\r\n      const newSnack = newSnacks[i];\r\n      if (newSnack.dismissed) {\r\n        this.props.closeSnackbar(newSnack.key);\r\n        this.props.removeSnackbar(newSnack.key);\r\n      }\r\n\r\n      if (notExists) continue;\r\n      notExists =\r\n        notExists ||\r\n        !currentSnacks.filter(({ key }) => newSnack.key === key).length;\r\n    }\r\n    return notExists;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { notifications = [] } = this.props;\r\n\r\n    notifications.forEach(({ key, message, options = {} }) => {\r\n      // Do nothing if snackbar is already displayed\r\n      if (this.displayed.includes(key)) return;\r\n      // Display snackbar using notistack\r\n      this.props.enqueueSnackbar(message, {\r\n        ...options,\r\n        onClose: (event, reason, key) => {\r\n          if (options.onClose) {\r\n            options.onClose(event, reason, key);\r\n          }\r\n          // Dispatch action to remove snackbar from redux store\r\n          this.props.removeSnackbar(key);\r\n        }\r\n      });\r\n      // Keep track of snackbars that we've displayed\r\n      this.storeDisplayed(key);\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return null;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    notifications: getNotifications(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    actions: bindActionCreators(actionCreators, dispatch)\r\n  };\r\n};\r\n\r\nexport default withSnackbar(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(NotificationContainer)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}