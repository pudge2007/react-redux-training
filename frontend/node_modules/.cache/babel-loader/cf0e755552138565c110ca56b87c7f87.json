{"ast":null,"code":"import _defineProperty from \"D:\\\\projects\\\\mern-kinopoisk\\\\frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"D:\\\\projects\\\\mern-kinopoisk\\\\frontend\\\\src\\\\modules\\\\common\\\\Notifications\\\\containers\\\\NotificationContainer.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withSnackbar } from \"notistack\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport * as actionCreators from \"../actions\";\nimport Notification from \"../components\";\nimport { getNotifications } from \"../selectors\";\n\nclass NotificationContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.displayed = [];\n\n    this.storeDisplayed = key => {\n      this.displayed = [...this.displayed, key];\n    };\n  }\n\n  render() {\n    const _this$props = this.props,\n          notifications = _this$props.notifications,\n          enqueueSnackbar = _this$props.enqueueSnackbar;\n    const removeNotification = this.props.actions.removeNotification;\n    notifications.forEach(({\n      key,\n      message,\n      options = {}\n    }) => {\n      setTimeout(() => {\n        // Do nothing if snackbar is already displayed\n\n        /* if (this.displayed.includes(key)) return; */\n        // Display notification using notistack\n        enqueueSnackbar(message, _objectSpread({}, options, {\n          action: () => React.createElement(IconButton, {\n            onClick: () => removeNotification(key),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 41\n            },\n            __self: this\n          }, React.createElement(CloseIcon, {\n            style: {\n              fontSize: 20,\n              color: \"#fff\"\n            },\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 42\n            },\n            __self: this\n          }))\n        })); // Keep track of snackbars that we've displayed\n\n        /* this.storeDisplayed(key); */\n      }, 1);\n    });\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notifications: getNotifications(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch)\n  };\n};\n\nexport default withSnackbar(connect(mapStateToProps, mapDispatchToProps)(NotificationContainer));","map":{"version":3,"sources":["D:\\projects\\mern-kinopoisk\\frontend\\src\\modules\\common\\Notifications\\containers\\NotificationContainer.js"],"names":["React","Component","connect","bindActionCreators","withSnackbar","IconButton","CloseIcon","actionCreators","Notification","getNotifications","NotificationContainer","displayed","storeDisplayed","key","render","props","notifications","enqueueSnackbar","removeNotification","actions","forEach","message","options","setTimeout","action","fontSize","color","mapStateToProps","state","mapDispatchToProps","dispatch"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,YAAT,QAA6B,WAA7B;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AAEA,OAAO,KAAKC,cAAZ,MAAgC,YAAhC;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,gBAAT,QAAiC,cAAjC;;AAEA,MAAMC,qBAAN,SAAoCT,SAApC,CAA8C;AAAA;AAAA;AAAA,SAW5CU,SAX4C,GAWhC,EAXgC;;AAAA,SAa5CC,cAb4C,GAa3BC,GAAG,IAAI;AACtB,WAAKF,SAAL,GAAiB,CAAC,GAAG,KAAKA,SAAT,EAAoBE,GAApB,CAAjB;AACD,KAf2C;AAAA;;AAiB5CC,EAAAA,MAAM,GAAG;AAAA,wBACoC,KAAKC,KADzC;AAAA,UACCC,aADD,eACCA,aADD;AAAA,UACgBC,eADhB,eACgBA,eADhB;AAAA,UAECC,kBAFD,GAEwB,KAAKH,KAAL,CAAWI,OAFnC,CAECD,kBAFD;AAIPF,IAAAA,aAAa,CAACI,OAAd,CAAsB,CAAC;AAAEP,MAAAA,GAAF;AAAOQ,MAAAA,OAAP;AAAgBC,MAAAA,OAAO,GAAG;AAA1B,KAAD,KAAoC;AACxDC,MAAAA,UAAU,CAAC,MAAM;AACf;;AACA;AACA;AACAN,QAAAA,eAAe,CAACI,OAAD,oBACVC,OADU;AAEbE,UAAAA,MAAM,EAAE,MACN,oBAAC,UAAD;AAAY,YAAA,OAAO,EAAE,MAAMN,kBAAkB,CAACL,GAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aACE,oBAAC,SAAD;AAAW,YAAA,KAAK,EAAE;AAAEY,cAAAA,QAAQ,EAAE,EAAZ;AAAgBC,cAAAA,KAAK,EAAE;AAAvB,aAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAHW,WAAf,CAJe,CAYf;;AACA;AACD,OAdS,EAcP,CAdO,CAAV;AAeD,KAhBD;AAkBA,WAAO,IAAP;AACD;;AAxC2C;;AA2C9C,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLZ,IAAAA,aAAa,EAAEP,gBAAgB,CAACmB,KAAD;AAD1B,GAAP;AAGD,CAJD;;AAMA,MAAMC,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLX,IAAAA,OAAO,EAAEhB,kBAAkB,CAACI,cAAD,EAAiBuB,QAAjB;AADtB,GAAP;AAGD,CAJD;;AAMA,eAAe1B,YAAY,CACzBF,OAAO,CACLyB,eADK,EAELE,kBAFK,CAAP,CAGEnB,qBAHF,CADyB,CAA3B","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { withSnackbar } from \"notistack\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nimport * as actionCreators from \"../actions\";\r\nimport Notification from \"../components\";\r\nimport { getNotifications } from \"../selectors\";\r\n\r\nclass NotificationContainer extends Component {\r\n  /*   remove = id => {\r\n    this.props.actions.removeNotification(id);\r\n  };\r\n\r\n  render() {\r\n    return this.props.notifications.map(n => (\r\n      <Notification key={n.id} {...n} onClose={this.remove} />\r\n    ));\r\n  } */\r\n\r\n  displayed = [];\r\n\r\n  storeDisplayed = key => {\r\n    this.displayed = [...this.displayed, key];\r\n  };\r\n\r\n  render() {\r\n    const { notifications, enqueueSnackbar } = this.props;\r\n    const { removeNotification } = this.props.actions;\r\n\r\n    notifications.forEach(({ key, message, options = {} }) => {\r\n      setTimeout(() => {\r\n        // Do nothing if snackbar is already displayed\r\n        /* if (this.displayed.includes(key)) return; */\r\n        // Display notification using notistack\r\n        enqueueSnackbar(message, {\r\n          ...options,\r\n          action: () => (\r\n            <IconButton onClick={() => removeNotification(key)}>\r\n              <CloseIcon style={{ fontSize: 20, color: \"#fff\" }} />\r\n            </IconButton>\r\n          )\r\n        });\r\n        // Keep track of snackbars that we've displayed\r\n        /* this.storeDisplayed(key); */\r\n      }, 1);\r\n    });\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    notifications: getNotifications(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    actions: bindActionCreators(actionCreators, dispatch)\r\n  };\r\n};\r\n\r\nexport default withSnackbar(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(NotificationContainer)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}