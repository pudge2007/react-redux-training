{"ast":null,"code":"import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { withSnackbar } from \"notistack\";\nimport * as actionCreators from \"../actions\";\nimport Notification from \"../components\";\nimport { getNotifications } from \"../selectors\";\n\nclass NotificationContainer extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      displayed: []\n    };\n\n    this.storeDisplayed = key => {\n      this.setState(({\n        displayed\n      }) => ({\n        displayed: [...displayed, key]\n      }));\n    };\n  }\n\n  render() {\n    const notifications = this.props.notifications;\n    const displayed = this.state.displayed;\n    notifications.forEach(notification => {\n      setTimeout(() => {\n        // If notification already displayed, abort\n        if (displayed.indexOf(notification.key) > -1) return; // Display notification using notistack\n\n        enqueueSnackbar(notification.message, notification.options); // Add notification's key to the local state\n\n        this.storeDisplayed(notification.key); // Dispatch action to remove the notification from the redux store\n\n        removeSnackbar(notification.key);\n      }, 1);\n    });\n    return null;\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notifications: getNotifications(state)\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(actionCreators, dispatch)\n  };\n};\n\nexport default withSnackbar(connect(mapStateToProps, mapDispatchToProps)(NotificationContainer));","map":{"version":3,"sources":["D:\\projects\\mern-kinopoisk\\frontend\\src\\modules\\common\\Notifications\\containers\\NotificationContainer.js"],"names":["React","Component","connect","bindActionCreators","withSnackbar","actionCreators","Notification","getNotifications","NotificationContainer","state","displayed","storeDisplayed","key","setState","render","notifications","props","forEach","notification","setTimeout","indexOf","enqueueSnackbar","message","options","removeSnackbar","mapStateToProps","mapDispatchToProps","dispatch","actions"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,YAAT,QAA6B,WAA7B;AAEA,OAAO,KAAKC,cAAZ,MAAgC,YAAhC;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,SAASC,gBAAT,QAAiC,cAAjC;;AAEA,MAAMC,qBAAN,SAAoCP,SAApC,CAA8C;AAAA;AAAA;AAAA,SAW5CQ,KAX4C,GAWpC;AACNC,MAAAA,SAAS,EAAE;AADL,KAXoC;;AAAA,SAe5CC,cAf4C,GAe3BC,GAAG,IAAI;AACtB,WAAKC,QAAL,CAAc,CAAC;AAAEH,QAAAA;AAAF,OAAD,MAAoB;AAChCA,QAAAA,SAAS,EAAE,CAAC,GAAGA,SAAJ,EAAeE,GAAf;AADqB,OAApB,CAAd;AAGD,KAnB2C;AAAA;;AAqB5CE,EAAAA,MAAM,GAAG;AAAA,UACCC,aADD,GACmB,KAAKC,KADxB,CACCD,aADD;AAAA,UAECL,SAFD,GAEe,KAAKD,KAFpB,CAECC,SAFD;AAIPK,IAAAA,aAAa,CAACE,OAAd,CAAsBC,YAAY,IAAI;AACpCC,MAAAA,UAAU,CAAC,MAAM;AACf;AACA,YAAIT,SAAS,CAACU,OAAV,CAAkBF,YAAY,CAACN,GAA/B,IAAsC,CAAC,CAA3C,EAA8C,OAF/B,CAGf;;AACAS,QAAAA,eAAe,CAACH,YAAY,CAACI,OAAd,EAAuBJ,YAAY,CAACK,OAApC,CAAf,CAJe,CAKf;;AACA,aAAKZ,cAAL,CAAoBO,YAAY,CAACN,GAAjC,EANe,CAOf;;AACAY,QAAAA,cAAc,CAACN,YAAY,CAACN,GAAd,CAAd;AACD,OATS,EASP,CATO,CAAV;AAUD,KAXD;AAaA,WAAO,IAAP;AACD;;AAvC2C;;AA0C9C,MAAMa,eAAe,GAAGhB,KAAK,IAAI;AAC/B,SAAO;AACLM,IAAAA,aAAa,EAAER,gBAAgB,CAACE,KAAD;AAD1B,GAAP;AAGD,CAJD;;AAMA,MAAMiB,kBAAkB,GAAGC,QAAQ,IAAI;AACrC,SAAO;AACLC,IAAAA,OAAO,EAAEzB,kBAAkB,CAACE,cAAD,EAAiBsB,QAAjB;AADtB,GAAP;AAGD,CAJD;;AAMA,eAAevB,YAAY,CACzBF,OAAO,CACLuB,eADK,EAELC,kBAFK,CAAP,CAGElB,qBAHF,CADyB,CAA3B","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { withSnackbar } from \"notistack\";\r\n\r\nimport * as actionCreators from \"../actions\";\r\nimport Notification from \"../components\";\r\nimport { getNotifications } from \"../selectors\";\r\n\r\nclass NotificationContainer extends Component {\r\n  /*   remove = id => {\r\n    this.props.actions.removeNotification(id);\r\n  };\r\n\r\n  render() {\r\n    return this.props.notifications.map(n => (\r\n      <Notification key={n.id} {...n} onClose={this.remove} />\r\n    ));\r\n  } */\r\n\r\n  state = {\r\n    displayed: []\r\n  };\r\n\r\n  storeDisplayed = key => {\r\n    this.setState(({ displayed }) => ({\r\n      displayed: [...displayed, key]\r\n    }));\r\n  };\r\n\r\n  render() {\r\n    const { notifications } = this.props;\r\n    const { displayed } = this.state;\r\n\r\n    notifications.forEach(notification => {\r\n      setTimeout(() => {\r\n        // If notification already displayed, abort\r\n        if (displayed.indexOf(notification.key) > -1) return;\r\n        // Display notification using notistack\r\n        enqueueSnackbar(notification.message, notification.options);\r\n        // Add notification's key to the local state\r\n        this.storeDisplayed(notification.key);\r\n        // Dispatch action to remove the notification from the redux store\r\n        removeSnackbar(notification.key);\r\n      }, 1);\r\n    });\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    notifications: getNotifications(state)\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    actions: bindActionCreators(actionCreators, dispatch)\r\n  };\r\n};\r\n\r\nexport default withSnackbar(\r\n  connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(NotificationContainer)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}